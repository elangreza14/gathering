// Code generated by MockGen. DO NOT EDIT.
// Source: member.go
//
// Generated by this command:
//
//	mockgen -source member.go -destination ../../mock/service/mock_member.go -package service
//
// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	domain "github.com/elangreza14/gathering/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockmemberRepo is a mock of memberRepo interface.
type MockmemberRepo struct {
	ctrl     *gomock.Controller
	recorder *MockmemberRepoMockRecorder
}

// MockmemberRepoMockRecorder is the mock recorder for MockmemberRepo.
type MockmemberRepoMockRecorder struct {
	mock *MockmemberRepo
}

// NewMockmemberRepo creates a new mock instance.
func NewMockmemberRepo(ctrl *gomock.Controller) *MockmemberRepo {
	mock := &MockmemberRepo{ctrl: ctrl}
	mock.recorder = &MockmemberRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmemberRepo) EXPECT() *MockmemberRepoMockRecorder {
	return m.recorder
}

// CreateMember mocks base method.
func (m *MockmemberRepo) CreateMember(ctx context.Context, arg domain.Member) (*domain.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMember", ctx, arg)
	ret0, _ := ret[0].(*domain.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMember indicates an expected call of CreateMember.
func (mr *MockmemberRepoMockRecorder) CreateMember(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMember", reflect.TypeOf((*MockmemberRepo)(nil).CreateMember), ctx, arg)
}

// FindInvitationByID mocks base method.
func (m *MockmemberRepo) FindInvitationByID(ctx context.Context, ID int64) (*domain.Invitation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindInvitationByID", ctx, ID)
	ret0, _ := ret[0].(*domain.Invitation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindInvitationByID indicates an expected call of FindInvitationByID.
func (mr *MockmemberRepoMockRecorder) FindInvitationByID(ctx, ID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindInvitationByID", reflect.TypeOf((*MockmemberRepo)(nil).FindInvitationByID), ctx, ID)
}

// FindMemberByID mocks base method.
func (m *MockmemberRepo) FindMemberByID(ctx context.Context, ID int64) (*domain.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMemberByID", ctx, ID)
	ret0, _ := ret[0].(*domain.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMemberByID indicates an expected call of FindMemberByID.
func (mr *MockmemberRepoMockRecorder) FindMemberByID(ctx, ID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMemberByID", reflect.TypeOf((*MockmemberRepo)(nil).FindMemberByID), ctx, ID)
}

// UpdateInvitation mocks base method.
func (m *MockmemberRepo) UpdateInvitation(ctx context.Context, arg domain.Invitation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInvitation", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateInvitation indicates an expected call of UpdateInvitation.
func (mr *MockmemberRepoMockRecorder) UpdateInvitation(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInvitation", reflect.TypeOf((*MockmemberRepo)(nil).UpdateInvitation), ctx, arg)
}
