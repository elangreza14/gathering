// Code generated by MockGen. DO NOT EDIT.
// Source: gathering.go
//
// Generated by this command:
//
//	mockgen -source gathering.go -destination ../../mock/service/mock_gathering.go -package service
//
// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"

	domain "github.com/elangreza14/gathering/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockgatheringRepo is a mock of gatheringRepo interface.
type MockgatheringRepo struct {
	ctrl     *gomock.Controller
	recorder *MockgatheringRepoMockRecorder
}

// MockgatheringRepoMockRecorder is the mock recorder for MockgatheringRepo.
type MockgatheringRepoMockRecorder struct {
	mock *MockgatheringRepo
}

// NewMockgatheringRepo creates a new mock instance.
func NewMockgatheringRepo(ctrl *gomock.Controller) *MockgatheringRepo {
	mock := &MockgatheringRepo{ctrl: ctrl}
	mock.recorder = &MockgatheringRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockgatheringRepo) EXPECT() *MockgatheringRepoMockRecorder {
	return m.recorder
}

// CreateAttendee mocks base method.
func (m *MockgatheringRepo) CreateAttendee(arg0 domain.Attendee) (*domain.Attendee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAttendee", arg0)
	ret0, _ := ret[0].(*domain.Attendee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAttendee indicates an expected call of CreateAttendee.
func (mr *MockgatheringRepoMockRecorder) CreateAttendee(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAttendee", reflect.TypeOf((*MockgatheringRepo)(nil).CreateAttendee), arg0)
}

// CreateGathering mocks base method.
func (m *MockgatheringRepo) CreateGathering(arg0 domain.Gathering) (*domain.Gathering, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGathering", arg0)
	ret0, _ := ret[0].(*domain.Gathering)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGathering indicates an expected call of CreateGathering.
func (mr *MockgatheringRepoMockRecorder) CreateGathering(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGathering", reflect.TypeOf((*MockgatheringRepo)(nil).CreateGathering), arg0)
}

// CreateInvitations mocks base method.
func (m *MockgatheringRepo) CreateInvitations(gatheringID int64, status string, memberID ...int64) error {
	m.ctrl.T.Helper()
	varargs := []any{gatheringID, status}
	for _, a := range memberID {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateInvitations", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateInvitations indicates an expected call of CreateInvitations.
func (mr *MockgatheringRepoMockRecorder) CreateInvitations(gatheringID, status any, memberID ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gatheringID, status}, memberID...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInvitations", reflect.TypeOf((*MockgatheringRepo)(nil).CreateInvitations), varargs...)
}

// FindGatheringByID mocks base method.
func (m *MockgatheringRepo) FindGatheringByID(ID int64) (*domain.Gathering, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindGatheringByID", ID)
	ret0, _ := ret[0].(*domain.Gathering)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindGatheringByID indicates an expected call of FindGatheringByID.
func (mr *MockgatheringRepoMockRecorder) FindGatheringByID(ID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindGatheringByID", reflect.TypeOf((*MockgatheringRepo)(nil).FindGatheringByID), ID)
}

// FindInvitationByGatheringIDAndMemberID mocks base method.
func (m *MockgatheringRepo) FindInvitationByGatheringIDAndMemberID(gatheringID, memberID int64) (*domain.Invitation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindInvitationByGatheringIDAndMemberID", gatheringID, memberID)
	ret0, _ := ret[0].(*domain.Invitation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindInvitationByGatheringIDAndMemberID indicates an expected call of FindInvitationByGatheringIDAndMemberID.
func (mr *MockgatheringRepoMockRecorder) FindInvitationByGatheringIDAndMemberID(gatheringID, memberID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindInvitationByGatheringIDAndMemberID", reflect.TypeOf((*MockgatheringRepo)(nil).FindInvitationByGatheringIDAndMemberID), gatheringID, memberID)
}

// FindMemberByID mocks base method.
func (m *MockgatheringRepo) FindMemberByID(ID int64) (*domain.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMemberByID", ID)
	ret0, _ := ret[0].(*domain.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMemberByID indicates an expected call of FindMemberByID.
func (mr *MockgatheringRepoMockRecorder) FindMemberByID(ID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMemberByID", reflect.TypeOf((*MockgatheringRepo)(nil).FindMemberByID), ID)
}
